1. создали приложение на сайте https://start.spring.io/ добавили зависимость СПРИНГ ШЕЛ

** СТАРТЕР СПРИНГ БУТ ШЕЛ

2. открыли в иде скачаный архив, в нем есть Демо Апликацион с аннотацией @SpringBootApplication - она комбинированная и состоит из множества других аннотаций
благодаря этой аннотации СПРИНГ БУТ настроит приложение
3. приложение: СИМУЛЯЦИЯ ПАРКОВОЧНОЙ ПЛОЩАДКИ
4. Создали класс ParkingShel, пометим его аннотацией @ShellComponent (производная от КОМПОНЕНТ) - классы будут регистрироваться в контексте СПРИНГ , так же внутри классов помеченных этой аннотацией
мы можем создавать методы которые  можем вызывать из консоли
5. создадим парковочную площадку (обычная МАПА)
6. создали  public String init() и пометили аннотацией     @ShellMethod (его можнго вызвать теперь из консоли).
 - в классе public class ParkingShel {} мы можем создавать специальные методы, которые можно будет вызывать из консоли
- после запуска проги, можно вывести метод из консоли
- для метода можем сделать ключ вызова : i 10 20 30 , для этого нужно указать КЕЙ у аннотации шелМетод     @ShellMethod(key = "i")
- можем указать ключ для свойств i --big 10 --medium 20 --small 30 и получим результат
- делаем вызов: i --b 10 --m 20 --s 30   с помощь :
public String init(@ShellOption(value = "b") int big,
                       @ShellOption(value = "m") int medium,
                       @ShellOption(value = "s") int small){}
7. метод реализует парковку машин:public  String addCar(int carType) {}
8. сделаем так чтобы нельзя было вызывать метод от КАР если на парковке вообще нет места  public Availability canAddCar(){}.
  // (Availability -объект, с пом-ю которого Спринг шел понимает может ли быть вызван метод или он не доступен для вызова)
        //для того чтобы этот метод проверялся мы используем аннотацию     @ShellMethodAvailability("canAddCar") перед методом addCar(int carType)

2.2 Конфигурация в Spring Boot
приложение может запускаться на разных стендах и иметь разные настройки (на 1 из стендов можем считывать значение из очереди и обрабатывать их, тогда как на 2 стенде такой возможности нет ) )
-ДЛЯ ОБРАБОТКИ СОБЫТИЙ МЫ РЕАЛИЗУЕМ БИНЫ, КОТОРЫЕ БУДУТ ВЫПОЛНЯТЬ ЭТУ РАБОТУ. дЛЯ ТОГО ЧТОБЫ БИНЫ ЗАПУСКАЛИСЬ ТОЛЬКО В КОНКРЕТНОМ СЛУЧАЕ (НАСТРОЙКИ В ПРОФИЛЕ ПРИЛОЖЕНИЯ)
1. Conditial :
ConditionalOnClass: ПОДКЛЮЧАЕТ БИН ЕСЛИ В КЛАСС ПАССЕ БУДЕТ ИМЕТСЯ КЛАСС, КОТОРЫЙ БЫЛ ПЕРЕДАН В ЭТУ АННОТАЦИЮ
• ConditionalOnBean: ЭТА АННОТАЦИЯ АКТИВИРУЕТСЯ ЕСЛИ В КОНТЕКСТЕ ПРИЛОЖЕНИЯ ЕСТЬ БИН КОТОРЫЙ МЫ УКАЗАЛИ В ЭТОЙ АННОТАЦИИ
• ConditionalOnProperty: АКТИВИРУЕТСЯ ЕСЛИ НЕКОТОРОЕ СВОЙСТВО КОТОРОЕ МЫ УКАЗАЛИ В ЭТОЙ АННОТ-ИИ ИМЕЕТ ОПРЕДЕЛЕННОЕ ЗНАЧЕНИЕ
• ConditionalOnMissingBean: АКТИВ-СЯ ЕСЛИ ОПРЕДЕЛЕННЫЙ БИН В КОНТЕКСТЕ ПРИЛОЖЕНИЯ ОТСУСТВ.
• ConditionalOnExpression: АКТИВИРУЕТСЯ ЕСЛИ СПЕЛЛ-ВЫРОЖЕНИЕ , КОТОРОЕ МЫ ПЕРЕДАЛИ В НЕЕ ВЫЧЕСЛЯЕТСЯ КАК ИСТИННАЯ

2. СОЗДАДИМ ПРИЛОЖЕНИЕ НА САЙТЕ
3. EventQueue , обозначим его @Component, используем очередь     private final BlockingQueue<Event> queue = new LinkedBlockingQueue<>();
4. Event используем в нем специальную аннотацию из класса ЛОМБОК @Data (генерирует за нас методы  ТУСТРИНГ, ХЭШ-КОД, ГЕТЕРЫ И СЕТТЕРЫ):
в БИЛДГРЭДЛ укажем :
            compileOnly 'org.projectlombok:lombok'
            	annotationProcessor 'org.projectlombok:lombok'
            	  обновляем
@AllArgsConstructor   ГЕНЕРИРУБТ КОНСТРУКТОРЫ СО ВСЕМИ СВОЙСТВАМИ НАШЕГО КЛАССА ,А ТАК ЖЕ БЕЗ СВОЙСТВ КОТОРЫЕ ГЕНЕРИРУЮТ ЗА НАС КОНСТРУКТОРЫ СО ВСЕМИ ПОЛЯМИ И БЕЗ ПОЛЕЙ
@NoArgsConstructor
@Builder    - ПОЗВОЛЯЕТ СКОНСТРУИРОВАТЬ ОБЪЕКТ С ПОМОЩЬЮ ПАТТЕРНА
эти аннотации напряму к спрингу не относятся , а к ломбок

Lombok — это библиотека, которая позволяет уменьшить
количество повторяющегося кода при разработке.
Она предоставляет аннотации, которые автоматически
генерируют геттеры, сеттеры, методы toString, equals
и hashCode, а также может генерировать конструкторы
для классов и реализовывать паттерн проектирования
Builder для более удобной инициализации вашего
компонента.

5. ЗАЙМЕМСЯ КОМПОНЕНТОМ КОТОРЫЙ БУДЕТ ЗАНИМАТЬСЯ СОЗД-ИЕМ И ВЫЧИТАНИЕМ СВОЙСТВ ИЗ ОЧЕРЕДИ :
СОЗДАДИМ КЛАСС EventQueueWorker
6. создадим класс конфигурации и внутри его настроим наш бин EventQueueWorker
 - создадим пакет конфиг
 - создадим EventQueueConfiguration

 ** ПРИ РАБОТЕ ПРИЛОЖЕНИЯ, ВЫЯСНИЛОСЬ ЧТО НЕ ВСЕГДА НУЖНО ГЕНЕРИРОВАТЬ СОБЫТИЯ, НУЖНО ИМЕТЬ ВОЗМОЖНОСТЬ ОТКЛ. ГЕНЕР-РА СОБЫТИЙ :
- добавим в ЕВЕНТКУЕУЕ аннотацию @ConditionalOnProperty и передадим в нее свойство "app.event-queue.enabled"
- в application.yaml добавим свойство которое будет отвечать за включение или отключен этот компонент
app:
  event-queue:
    enabled: false

**** ПРИ ЗАПУСКЕ ВИДИМ ОШИБКУ ЧТО БИН EventQueueWorker НЕ МОЖЕТ СОЗДАСТЬСЯ , Т.К. ДЛЯ НЕГО НЕ ХВАТАЕТ БИНА EventQueue
ОШИБКА:
2024-02-11T22:22:58.014+03:00  WARN 4024 --- [           main] s.c.a.AnnotationConfigApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'eventQueueWorker' defined in class path resource [com/example/bootconfigdemo/config/EventQueueConfiguration.class]: Unsatisfied dependency expressed through method 'eventQueueWorker' parameter 0: No qualifying bean of type 'com.example.bootconfigdemo.EventQueue' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
Т.К. МЫ ОДКЛЮЧИЛИ БИН EventQueue С ПОМОЩЬЮ АННОТАЦИИ @ConditionalOnProperty("app.event-queue.enabled") ОН НЕ ПОПАЛ В НАШ КОНТЕКСТ.
ПОПРОБУЕМ: ОТКЛЮЧИМ КЛАСС КОНФИГУРАЦИИ EventQueueConfiguration С ПОМОЩЬЮ АННОТАЦИИ @ConditionalOnBean(EventQueue.class) это значит,
что конфигурация EventQueueConfiguration будет обрабатываться, только в том случае, если контекст спринга зарегистрирует БИН EventQueue
- ПРИЛОЖЕНИЕ УСПЕШНО ЗАВЕРШИЛОСЬ
7. если мы изменим свойства в файле application.yaml
app:
  event-queue:
    enabled: false  на ТРУ то увидим что события начались обрабатываться

8/     @EventListener(ApplicationReadyEvent.class) - можем создать наше собств-ое событие и обрабатывать .

СОЗДАДИМ СПРИНГОВОЕ СОБЫТИЕ, В КОТОРОЕ БУДЕТ ПЕРЕДАВАТЬСЯ НАШЕ СОБЫТИЕ, ПОЛУЧЕНОЕ ЧЕРЕЗ ОЧЕРЕДЬ БЛОКИНГ КЮ
- НАЧНЕМ С РЕАЛИЗАЦИИ КАСТОМНОГО СПРИНГОВОГО СОБЫТИЯ
- СОЗДАДИМ ПАКЕТ ЕВЕНТ  а в нем EventHolder
9. Rеализуем компонент за слушание события EventHolderListener

//данная конструкция передачи EventHolder в метод помогает спрингу понять, какой метод вызывать при публикации события
// РЕАЛИЗУЕМ ПУБЛИКАЦИЮ СОБЫТИЯ в EventQueueWorker, делать это будем в методе  startEventConsumer();
    @EventListener
    public void listen(EventHolder eventHolder){
        System.out.println("Call listen method");
        //распечатем ЕВЕНТ:
        System.out.println(eventHolder.getEvent());
    }


    - добавим спринговый бин который отвечает за обработку событий , этот бин уже будет в контексте, настраивать его не требуется:
добавили:        private final ApplicationEventPublisher publisher; с помощью него будем публиковать событияя
так же его нужно внедрить в бин при ИНИЦИАЛИЗАЦИИ EventQueueConfiguration , добавляем в метод ПАБЛИШЕР:
   @Bean
    public EventQueueWorker eventQueueWorker(EventQueue eventQueue, ApplicationEventPublisher publisher){
        return new EventQueueWorker(eventQueue, publisher);
    }
    - отправляем события :
  переходим в   EventQueueWorker, уберем вывод из консоли события, добавляем      :          publisher.publishEvent(new EventHolder(this, event)); //указываем ИВЕНТ КОТОРЫЙ ПОЛУЧИЛИ ИЗ ОЧЕРЕДИ

запускаем прогу:

1 параметр - источник собюытия, а второй то чт обыло получено из очереди .
в результате мы видим КОЛ метод и ЭВЕН, котрый мы вытащили из очереди.

